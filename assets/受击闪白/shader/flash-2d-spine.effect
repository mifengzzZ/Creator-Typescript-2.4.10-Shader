
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        # texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_color: { value: [1,1,1,1], editor: {type: color} }
        u_rate: { value: 1 }
}%

CCProgram vs %{

precision highp float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in vec4 a_color;
#if USE_TINT
  in vec4 a_color0;
#endif

in vec2 a_uv0;
out vec2 v_uv0;

out vec4 v_light;
#if USE_TINT
  out vec4 v_dark;
#endif

void main () {
  mat4 mvp;
  
  #if CC_USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  v_uv0 = a_uv0;

  v_light = a_color;
  #if USE_TINT
    v_dark = a_color0;
  #endif

  gl_Position = mvp * vec4(a_position, 1);
}

}%

CCProgram fs %{

precision highp float;

uniform sampler2D texture;
in vec2 v_uv0;

in vec4 v_light;
#if USE_TINT
  in vec4 v_dark;
#endif

#include <alpha-test>
#include <texture>

uniform ARGS {
    vec4 u_color;
    float u_rate;
};

void main () {
  vec4 o = vec4(1, 1, 1, 1);

  CCTexture(texture, v_uv0, o);
  
  o *= v_light;
  vec4 finalColor;
  #if USE_TINT
    finalColor.a = v_light.a * o.a;
    finalColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * v_light.rgb;
  #else
    finalColor = o * v_light;
  #endif

  ALPHA_TEST(finalColor);

  vec3 result = mix(u_color.rgb, finalColor.rgb, u_rate);
  o = vec4(result.rgb, finalColor.a);

  gl_FragColor = o;
}

}%
