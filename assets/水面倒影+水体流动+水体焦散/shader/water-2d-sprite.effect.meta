{
  "ver": "1.0.27",
  "uuid": "99a1d0dd-86d5-4690-a5c8-9c296be6614a",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n#if USE_TILING\n  uniform vec2 tiling;\n#endif\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TILING\n    v_uv0 = a_uv0 * tiling;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform float colorStepUv;\nuniform float alphaStepUv;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n#endif\n#if USE_WAVE\n  uniform sampler2D waveTexture;\n  uniform vec2 waveDirection;\nuniform float waveSpeed;\nuniform float waveStrength;\n#endif\n#if USE_CAUSTIC\n  uniform vec4 causticColor;\nuniform float causticStrength;\nuniform float causticScale;\nuniform float causticSpeed;\nuniform float causticRGBSplit;\nuniform float causticDepth;\n  uniform sampler2D causticTexture;\n  vec2 panner(vec2 uv, float direction, float speed, vec2 offset, float tiling)\n  {\n      direction = direction * 2. - 1.;\n      vec2 dir = normalize(vec2(cos(3.1415926 * direction), sin(3.1415926 * direction)));\n      return  (dir * cc_time.x * speed) + offset + (uv * tiling);\n  }\n  vec3 rgbSplit(float split, sampler2D tex, vec2 uv)\n  {\n      vec2 UVR = uv + vec2(split, split);\n      vec2 UVG = uv + vec2(split, -split);\n      vec2 UVB = uv + vec2(-split, -split);\n      float r = texture2D(tex, UVR).r;\n      float g = texture2D(tex, UVG).g;\n      float b = texture2D(tex, UVB).b;\n      return vec3(r,g,b);\n  }\n  vec3 caustic()\n  {\n    vec2 uv = v_uv0;\n    float strength = causticStrength;\n    float split = causticRGBSplit * 0.01;\n    float speed = causticSpeed;\n    float scale = causticScale;\n    vec3 texture1 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), 1./scale));\n    vec3 texture2 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), -1./scale));\n    vec3 textureCombined = min(texture1, texture2);\n    return strength * 10. * textureCombined;\n  }\n#endif\nvoid main () {\n  vec2 uv = v_uv0;\n  #if USE_WAVE\n    float time = cc_time.x * waveSpeed;\n    vec2 offset = texture2D(waveTexture, uv + time * waveDirection).xy*waveStrength;\n    uv += offset;\n  #endif\n  vec4 o;\n  #if USE_TEXTURE\n    o = texture2D(texture, uv);\n    o *= v_color;\n  #endif\n  #if USE_CAUSTIC\n    float causticDepth = causticColor.x;\n    vec3 ctColor = causticColor.yzw;\n    o.rgb += caustic() * ctColor;\n  #endif\n  #if USE_COLOR_STEP\n    o.rgb *=smoothstep(1.5,-0.1,uv.y*colorStepUv) ;\n  #endif\n  #if USE_ALPHA_STEP\n    o.a *=smoothstep(-0.2,0.75,uv.y*alphaStepUv) ;\n  #endif\n  gl_FragColor = o.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n#if USE_TILING\n  uniform VSConstant {\n    vec2 tiling;\n  };\n#endif\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TILING\n    v_uv0 = a_uv0 * tiling;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform Constant {\n  float colorStepUv;\n  float alphaStepUv;\n};\n#if USE_TEXTURE\n  uniform sampler2D texture;\n#endif\n#if USE_WAVE\n  uniform sampler2D waveTexture;\n  uniform waveConstant {\n    vec2 waveDirection;\n    float waveSpeed;\n    float waveStrength;\n  };\n#endif\n#if USE_CAUSTIC\n  uniform Caustic {\n    vec4 causticColor;\n    float causticStrength;\n    float causticScale;\n    float causticSpeed;\n    float causticRGBSplit;\n    float causticDepth;\n  };\n  uniform sampler2D causticTexture;\n  vec2 panner(vec2 uv, float direction, float speed, vec2 offset, float tiling)\n  {\n      direction = direction * 2. - 1.;\n      vec2 dir = normalize(vec2(cos(3.1415926 * direction), sin(3.1415926 * direction)));\n      return  (dir * cc_time.x * speed) + offset + (uv * tiling);\n  }\n  vec3 rgbSplit(float split, sampler2D tex, vec2 uv)\n  {\n      vec2 UVR = uv + vec2(split, split);\n      vec2 UVG = uv + vec2(split, -split);\n      vec2 UVB = uv + vec2(-split, -split);\n      float r = texture(tex, UVR).r;\n      float g = texture(tex, UVG).g;\n      float b = texture(tex, UVB).b;\n      return vec3(r,g,b);\n  }\n  vec3 caustic()\n  {\n    vec2 uv = v_uv0;\n    float strength = causticStrength;\n    float split = causticRGBSplit * 0.01;\n    float speed = causticSpeed;\n    float scale = causticScale;\n    vec3 texture1 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), 1./scale));\n    vec3 texture2 = rgbSplit(split, causticTexture, panner(uv, 1., speed, vec2(0., 0.), -1./scale));\n    vec3 textureCombined = min(texture1, texture2);\n    return strength * 10. * textureCombined;\n  }\n#endif\nvoid main () {\n  vec2 uv = v_uv0;\n  #if USE_WAVE\n    float time = cc_time.x * waveSpeed;\n    vec2 offset = texture(waveTexture, uv + time * waveDirection).xy*waveStrength;\n    uv += offset;\n  #endif\n  vec4 o;\n  #if USE_TEXTURE\n    o = texture(texture, uv);\n    o *= v_color;\n  #endif\n  #if USE_CAUSTIC\n    float causticDepth = causticColor.x;\n    vec3 ctColor = causticColor.yzw;\n    o.rgb += caustic() * ctColor;\n  #endif\n  #if USE_COLOR_STEP\n    o.rgb *=smoothstep(1.5,-0.1,uv.y*colorStepUv) ;\n  #endif\n  #if USE_ALPHA_STEP\n    o.a *=smoothstep(-0.2,0.75,uv.y*alphaStepUv) ;\n  #endif\n  gl_FragColor = o.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}